// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xDrive.DAL;

#nullable disable

namespace xDrive.DAL.Migrations
{
    [DbContext(typeof(xDriveDbContext))]
    [Migration("20220504144223_UpdateCarsFKs")]
    partial class UpdateCarsFKs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.2.22153.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("xDrive.DAL.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FirstDateRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("xDrive.DAL.Entities.RouteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssumedTimeToEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Beginning")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Finish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("DriverId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("xDrive.DAL.Entities.SeatReservationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid?>("PassengerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlannedRouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("PlannedRouteId");

                    b.ToTable("SeatReservations");
                });

            modelBuilder.Entity("xDrive.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("xDrive.DAL.Entities.CarEntity", b =>
                {
                    b.HasOne("xDrive.DAL.Entities.UserEntity", null)
                        .WithMany("OwnedCars")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("xDrive.DAL.Entities.RouteEntity", b =>
                {
                    b.HasOne("xDrive.DAL.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("xDrive.DAL.Entities.UserEntity", "Driver")
                        .WithMany("PlannedRoutesAsDriver")
                        .HasForeignKey("DriverId");

                    b.Navigation("Car");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("xDrive.DAL.Entities.SeatReservationEntity", b =>
                {
                    b.HasOne("xDrive.DAL.Entities.UserEntity", "Passenger")
                        .WithMany("Seats")
                        .HasForeignKey("PassengerId");

                    b.HasOne("xDrive.DAL.Entities.RouteEntity", "PlannedRoute")
                        .WithMany("Passengers")
                        .HasForeignKey("PlannedRouteId");

                    b.Navigation("Passenger");

                    b.Navigation("PlannedRoute");
                });

            modelBuilder.Entity("xDrive.DAL.Entities.RouteEntity", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("xDrive.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("OwnedCars");

                    b.Navigation("PlannedRoutesAsDriver");

                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
